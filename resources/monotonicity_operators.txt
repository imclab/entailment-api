# KEY: token	 arity	 operatorPattern	 arg1Pattern	 arg1Monotonicity	 arg2Pattern	 arg2Monotonicity	 type (optional)

without	unary	IN < /^[Ww]ithout$/	PP < (IN < /^[Ww]ithout$/)	down	unk

refused	unary	VBD < /^[Rr]efused$/	S > (VP < (VBD < /^[Rr]efused$/))	down	verb

# TODO need to work on argument patterns for most
most	binary	JJS < /^[Mm]ost$/ !> QP	__ >+(NP) (NP=proj !> NP)	non	__ >> (S=proj !> S)	up	quantifier

# Is the QP applicable here?
best	unary	JJS < /^[Bb]est$/ !> QP	NN > (NP < (JJS < /^[Bb]est$/))	non	intersective



# ************* JJ JJS *************
#second	unary	JJ < /^[Ss]econd$/	JJS , (JJ < /^[Ss]econd$/)	non	secondarymodification
#third	unary	JJ < /^[Tt]hird$/	JJS , (JJ < /^[Tt]hird$/)	non	secondarymodification
#fourth	unary	JJ < /^[Ff]ourth$/	JJS , (JJ < /^[Ff]ourth$/)	non	secondarymodification
#fifth	unary	JJ < /^[Ff]ifth$/	JJS , (JJ < /^[Ff]ifth$/)	non	secondarymodification
#sixth	unary	JJ < /^[Ss]ixth$/	JJS , (JJ < /^[Ss]ixth$/)	non	secondarymodification
#seventh	unary	JJ < /^[Ss]eventh$/	JJS , (JJ < /^[Ss]eventh$/)	non	secondarymodification
#eighth	unary	JJ < /^[Ee]ighth$/	JJS , (JJ < /^[Ee]ighth$/)	non	secondarymodification
#ninth	unary	JJ < /^[Nn]inth$/	JJS , (JJ < /^[Nn]inth$/)	non	secondarymodification
#tenth	unary	JJ < /^[Tt]enth$/	JJS , (JJ < /^[Tt]enth$/)	non	secondarymodification

# ************* END JJ JJS *************





# ************* NEGATION *************

no	unary	DT < /^[Nn]o$/	NP < (DT < /^[Nn]o$/)	down	negation

# Not sure about this argument pattern
no	unary	UH < /^[Nn]o$/	S << (UH < /^[Nn]o$/)	down	negation


# arg1 pattern might only work sometimes
# n't	unary	RB < /^[Nn]'t$/	S < (__ < (RB < /^n't$/))	down	negation

n't	unary	RB < /^[Nn]'t$/	VP > (__ < (RB < /^[Nn]'t$/))	down	negation


not	unary	RB < /^[Nn]ot$/	NP > (VP < (RB < /^[Nn]ot$/))	down	negation

not	unary	RB < /^[Nn]ot$/	S < (__ < (RB < /^n't$/))	down	negation


never	unary	ADVP < (RB < /^[Nn]ever$/)	VP > (S < (ADVP < (RB < /^[Nn]ever$/)))	down	negation

# This could be problematic as 'Never' should not be captured.
never	unary	ADVP < (RB < /^[Nn]ever$/)	SINV < (ADVP < (RB < /^[Nn]ever$/))	down	negation

anti	unary	NN < /^[Aa]nti$/	JJ > (NP < (NN < /^[Aa]nti$/))	down	negation
# This is problematic; the first NNP ('anti') should not be captured.
anti	unary	NNP < /^[Aa]nti$/	NNP > (NP < (NNP < /^[Aa]nti$/))	down	negation
anti	unary	JJ < /^[Aa]nti$/	NNP > (NP < (JJ < /^[Aa]nti$/))	down	negation
anti	unary	JJ < /^[Aa]nti$/	NN > (NP < (JJ < /^[Aa]nti$/))	down	negation

# Fail
# They failed to win the game.
failed	unary	VBD < /^[Ff]ailed$/	S > (VP < (VBD < /^[Ff]ailed$/))	down	negation

# They failed the test.
failed	unary	VBD < /^[Ff]ailed$/	NP > (VP < (VBD < /^[Ff]ailed$/))	down	negation

# They will fail to win.
fail	unary	VB < /^[Ff]ail$/	S > (VP < (VB < /^[Ff]ail$/))	down	negation

# They will fail the test.
fail	unary	VB < /^[Ff]ail$/	NP > (VP < (VB < /^[Ff]ail$/))	down	negation

# ? They had failed the test before.

# He fails it every time.
fails	unary	VBZ < /^[Ff]ails$/	NP > (VP < (VBZ < /^[Ff]ails$/))	down	negation

# He fails to win.
fails	unary	VBZ < /^[Ff]ails$/	S > (VP < (VBZ < /^[Ff]ails$/))	down	negation

# They are failing the test.
failing	unary	VBG < /^[Ff]ailing$/	NP > (VP < (VBG < /^[Ff]ailing$/))	down	negation

# they are failing to beat Duke
failing	unary	VBG < /^[Ff]ailing$/	S > (VP < (VBG < /^[Ff]ailing$/))	down	negation

# neither
# Fillmore was the last president who was neither a Democrat nor a Republican
neither	unary	RB < /^[Nn]either$/	NP > (VP < (RB < /^[Nn]either$/))	down	negation

# the team neither won nor lost
neither	unary	RB < /^[Nn]either$/	VP > (S < (ADVP < (RB < /^[Nn]either$/)))	down	negation



# ************* END NEGATION *************